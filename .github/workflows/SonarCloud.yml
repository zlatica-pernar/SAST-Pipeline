name: SonarCloud Analysis for Vulnerable Test Repos

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarcloud_scan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project:
          - name: DVWA
            path: VulnerableTestRepos/DVWA
          - name: Nodegoat
            path: VulnerableTestRepos/Nodegoat
          - name: VulnerableApp
            path: VulnerableTestRepos/VulnerableApp
            java-version: 11
            build-tool: gradle
          - name: Webgoat
            path: VulnerableTestRepos/Webgoat
            java-version: 21
            build-tool: maven
          - name: Juice-Shop
            path: VulnerableTestRepos/Juice-Shop

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # Set up Java environment for Java projects
      - name: Set up Java
        if: matrix.project.java-version != null
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ matrix.project.java-version }}

      # Separate Maven and Gradle build and analysis steps within Docker
      - name: Run Maven Build and SonarCloud Analysis in Docker
        if: matrix.project.build-tool == 'maven'
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          docker run --rm \
            -e SONAR_HOST_URL=$SONAR_HOST_URL \
            -e SONAR_TOKEN=$SONAR_TOKEN \
            -v "${{ github.workspace }}/${{ matrix.project.path }}:/usr/src" \
            -w "/usr/src" \
            sonarsource/sonar-scanner-cli \
            /bin/bash -c "mvn clean compile && sonar-scanner \
              -Dsonar.projectKey=${{ matrix.project.name }} \
              -Dsonar.organization=sast-pipeline \
              -Dsonar.sources=/usr/src \
              -Dsonar.java.binaries=/usr/src/target/classes"

      - name: Run Gradle Build and SonarCloud Analysis in Docker
        if: matrix.project.build-tool == 'gradle'
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          docker run --rm \
            -e SONAR_HOST_URL=$SONAR_HOST_URL \
            -e SONAR_TOKEN=$SONAR_TOKEN \
            -v "${{ github.workspace }}/${{ matrix.project.path }}:/usr/src" \
            -w "/usr/src" \
            sonarsource/sonar-scanner-cli \
            /bin/bash -c "chmod +x ./gradlew && ./gradlew wrapper --gradle-version 8.0 && ./gradlew build && sonar-scanner \
              -Dsonar.projectKey=${{ matrix.project.name }} \
              -Dsonar.organization=sast-pipeline \
              -Dsonar.sources=/usr/src \
              -Dsonar.java.binaries=/usr/src/build/classes/java/main"

      # Fallback for non-Java projects
      - name: Analyze Non-Java Project with SonarCloud
        if: matrix.project.build-tool == null
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          docker run --rm \
            -e SONAR_HOST_URL=$SONAR_HOST_URL \
            -e SONAR_TOKEN=$SONAR_TOKEN \
            -v "${{ github.workspace }}/${{ matrix.project.path }}:/usr/src" \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=${{ matrix.project.name }} \
            -Dsonar.organization=sast-pipeline \
            -Dsonar.sources=/usr/src
