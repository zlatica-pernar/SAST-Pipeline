package org.sasanlabs.service.vulnerability.ssrf;

import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

/**
 * This is the mocked implementation of MetaDataService for various Cloud Platforms For more
 * information https://gist.github.com/BuffaloWill/fa96693af67e3a3dd3fb
 *
 * @author KSASAN preetkaran20@gmail.com
 */
public class MetaDataServiceMock {

    private static final String AWS = "aws";

    private static final Map<String, Set<String>> IP_ENVIRONMENT_MAP = new HashMap<>();

    static {
        IP_ENVIRONMENT_MAP.put(
                AWS,
                new HashSet<>(
                        Arrays.asList(
                                "[::ffff:169.254.169.254]",
                                "[0:0:0:0:0:ffff:169.254.169.254]",
                                "169.254.169.254",
                                "169.254.170.2")));
    }

    private MetaDataServiceMock() {}

    private static class MetaDataEndpointResponseBean {
        private String url;
        private String response;
        private String environment;

        public MetaDataEndpointResponseBean(String url, String response, String environment) {
            super();
            this.url = url;
            this.response = response;
            this.environment = environment;
        }
    }

    private static final List<MetaDataEndpointResponseBean> METADATA_ENDPOINT_RESPONSE_BEAN =
            Arrays.asList(
                    new MetaDataEndpointResponseBean("/", "1.0", AWS),
                    new MetaDataEndpointResponseBean("", "1.0", AWS),
                    new MetaDataEndpointResponseBean("/latest", "dynamic\nmeta-data", AWS),
                    new MetaDataEndpointResponseBean("/1.0", "meta-data", AWS),
                    new MetaDataEndpointResponseBean(
                            "/1.0/meta-data",
                            "ami-id\n"
                                    + "ami-launch-index\n"
                                    + "ami-manifest-path\n"
                                    + "hostname\n"
                                    + "instance-id\n"
                                    + "local-ipv4\n"
                                    + "public-keys/\n"
                                    + "reservation-id\n"
                                    + "security-groups",
                            AWS),
                    new MetaDataEndpointResponseBean(
                            "/latest/meta-data",
                            "ami-id\n"
                                    + "ami-launch-index\n"
                                    + "ami-manifest-path\n"
                                    + "block-device-mapping/\n"
                                    + "events/\n"
                                    + "hostname\n"
                                    + "iam/\n"
                                    + "identity-credentials/\n"
                                    + "instance-action\n"
                                    + "instance-id\n"
                                    + "instance-life-cycle\n"
                                    + "instance-type\n"
                                    + "local-hostname\n"
                                    + "local-ipv4\n"
                                    + "mac\n"
                                    + "metrics/\n"
                                    + "network/\n"
                                    + "placement/\n"
                                    + "profile\n"
                                    + "public-hostname\n"
                                    + "public-ipv4\n"
                                    + "public-keys/\n"
                                    + "reservation-id\n"
                                    + "security-groups\n"
                                    + "services/",
                            AWS),
                    new MetaDataEndpointResponseBean(
                            "/latest/dynamic", "fws/\n" + "instance-identity/", AWS),
                    new MetaDataEndpointResponseBean(
                            "/1.0/meta-data/ami-id", "ami-sasanlabsinstance", AWS),
                    new MetaDataEndpointResponseBean(
                            "/latest/meta-data/ami-id", "sasanlabsinstance", AWS),
                    new MetaDataEndpointResponseBean(
                            "/latest/meta-data/iam", "info\n" + "security-credentials/", AWS),
                    new MetaDataEndpointResponseBean(
                            "/latest/meta-data/iam/info",
                            "{\n"
                                    + "  \"Code\" : \"Success\",\n"
                                    + "  \"LastUpdated\" : \"2022-07-30T12:55:49Z\",\n"
                                    + "  \"InstanceProfileArn\" : \"arn:aws:iam::sasanlabs:instance-profile/role-sasanlabs\",\n"
                                    + "  \"InstanceProfileId\" : \"something\"\n"
                                    + "}",
                            AWS),
                    new MetaDataEndpointResponseBean(
                            "/latest/meta-data/iam/security-credentials/", "role-sasanlabs", AWS),
                    new MetaDataEndpointResponseBean(
                            "/latest/meta-data/iam/security-credentials/role-sasanlabs",
                            "{\n"
                                    + "  \"Code\" : \"Success\",\n"
                                    + "  \"LastUpdated\" : \"2022-07-30T12:54:55Z\",\n"
                                    + "  \"Type\" : \"AWS-HMAC\",\n"
                                    + "  \"AccessKeyId\" : \"mockedAccessKeyId\",\n"
                                    + "  \"SecretAccessKey\" : \"mockedSecretAccessKey\",\n"
                                    + "  \"Token\" : \"mockedToken\",\n"
                                    + "  \"Expiration\" : \"2022-07-30T19:24:23Z\"\n"
                                    + "}",
                            AWS));

    static String getResponse(URL url) {
        if (isPresent(url)) {
            Optional<MetaDataEndpointResponseBean> metaEndpointResponseBeanOptional =
                    METADATA_ENDPOINT_RESPONSE_BEAN.stream()
                            .filter(
                                    metaEndpointResponseBean ->
                                            IP_ENVIRONMENT_MAP.entrySet().stream()
                                                    .anyMatch(
                                                            entry ->
                                                                    entry.getValue()
                                                                                    .contains(
                                                                                            url
                                                                                                    .getHost())
                                                                            && metaEndpointResponseBean
                                                                                    .environment
                                                                                    .equals(
                                                                                            entry
                                                                                                    .getKey())
                                                                            && metaEndpointResponseBean
                                                                                    .url.equals(
                                                                                    url.getPath())))
                            .findAny();
            if (metaEndpointResponseBeanOptional.isPresent()) {
                return metaEndpointResponseBeanOptional.get().response;
            }
        }

        return "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n"
                + "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
                + "		 \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
                + "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n"
                + " <head>\n"
                + "  <title>404 - Not Found</title>\n"
                + " </head>\n"
                + " <body>\n"
                + "  <h1>404 - Not Found</h1>\n"
                + " </body>\n"
                + "</html>";
    }

    static boolean isPresent(URL url) {
        return url.getProtocol().equals("http")
                && IP_ENVIRONMENT_MAP.values().stream()
                        .anyMatch(ips -> ips.contains(url.getHost()));
    }
}
