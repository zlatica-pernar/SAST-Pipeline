package org.sasanlabs.service.vulnerability.sqlInjection;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.verify;

import java.util.Collections;
import java.util.Map;
import java.util.Objects;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

class UnionBasedSQLInjectionVulnerabilityTest {

    private UnionBasedSQLInjectionVulnerability unionBasedSQLInjectionVulnerability;
    private JdbcTemplate template;
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    private CarInformationRepository carInformationRepository;
    private EntityManager entityManager;

    @BeforeEach
    void setUp() {
        template = Mockito.mock(JdbcTemplate.class);
        namedParameterJdbcTemplate = Mockito.mock(NamedParameterJdbcTemplate.class);
        carInformationRepository = Mockito.mock(CarInformationRepository.class);
        entityManager = Mockito.mock(EntityManager.class);

        // mock database
        doReturn(null)
                .when(template)
                .query(anyString(), (ResultSetExtractor<? extends Object>) any());
        doReturn(null)
                .when(template)
                .query(
                        anyString(),
                        (PreparedStatementSetter) any(),
                        (ResultSetExtractor<? extends Object>) any());

        unionBasedSQLInjectionVulnerability =
                new UnionBasedSQLInjectionVulnerability(
                        template,
                        namedParameterJdbcTemplate,
                        carInformationRepository,
                        entityManager);
    }

    @Test
    void getCarInformationLevel1_ExpectParamInjected() {
        // Act
        final Map<String, String> params =
                Collections.singletonMap("id", "1 UNION SELECT * FROM cars;");
        unionBasedSQLInjectionVulnerability.getCarInformationLevel1(params);

        // Assert
        verify(template)
                .query(
                        eq("select * from cars where id=1 UNION SELECT * FROM cars;"),
                        (ResultSetExtractor<? extends Object>) any());
    }

    @Test
    void getCarInformationLevel2_ExpectParamInjected() {
        // Act
        final Map<String, String> params =
                Collections.singletonMap("id", "1' UNION SELECT * FROM cars; --");
        unionBasedSQLInjectionVulnerability.getCarInformationLevel2(params);

        // Assert
        verify(template)
                .query(
                        eq("select * from cars where id='1' UNION SELECT * FROM cars; --'"),
                        (ResultSetExtractor<? extends Object>) any());
    }

    @Test
    void getCarInformationLevel3_ExpectParamEscaped() {
        // Act
        final Map<String, String> params =
                Collections.singletonMap("id", "1' UNION SELECT * FROM cars; --");
        unionBasedSQLInjectionVulnerability.getCarInformationLevel3(params);

        // Assert
        verify(template)
                .query(
                        eq("select * from cars where id='1 UNION SELECT * FROM cars; --'"),
                        (ResultSetExtractor<? extends Object>) any());
    }

    @Test
    void getCarInformationLevel4_ExpectParamEscaped() {
        // Act
        final Map<String, String> params =
                Collections.singletonMap("id", "1' UNION SELECT * FROM cars; --");
        unionBasedSQLInjectionVulnerability.getCarInformationLevel4(params);

        // Assert
        verify(template)
                .query(
                        eq("select * from cars where id=?"),
                        (PreparedStatementSetter) any(),
                        (ResultSetExtractor<? extends Object>) any());
    }

    @Test
    void getCarInformationLevel5_ExpectParamEscaped() {
        // Act
        final Map<String, String> params =
                Collections.singletonMap("id", "1' UNION SELECT * FROM cars; --");
        final String id = "1' UNION SELECT * FROM cars; --";
        unionBasedSQLInjectionVulnerability.getCarInformationLevel5(params);
        // Assert
        ArgumentMatcher<MapSqlParameterSource> argumentMatcher =
                sqlParameterSource ->
                        Objects.requireNonNull(sqlParameterSource.getValue("id").equals(id));
        verify(namedParameterJdbcTemplate)
                .queryForObject(
                        eq("select * from cars where id=:id"),
                        argThat(argumentMatcher),
                        (RowMapper<Object>)
                                argThat(
                                        val ->
                                                ((BeanPropertyRowMapper) val)
                                                        .getMappedClass()
                                                        .equals(CarInformation.class)));
    }
}
